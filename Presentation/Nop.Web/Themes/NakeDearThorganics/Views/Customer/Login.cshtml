@model LoginModel
@using Nop.Web.Models.Customer;
@using Nop.Core;
@using Nop.Core.Infrastructure;
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Login").Text);

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register");
    if (!String.IsNullOrEmpty(this.Context.Request.QueryString["returnUrl"]))
    {
        var webHelper = EngineContext.Current.Resolve<IWebHelper>();
        registerUrl = webHelper.ModifyQueryString(registerUrl, "returnurl=" + HttpUtility.UrlEncode(this.Context.Request.QueryString["returnUrl"]), null);
    }
}
<h1>@T("Account.Login.Welcome")</h1>
@Html.Partial("_ExternalAuthentication.AssociateMessage")
@Html.Partial("_ExternalAuthentication.Errors")
<div class="container">
    <div class="login-content row-fluid">
        <div class="span6">
            <div class="left">
                @if (Model.CheckoutAsGuest)
                {
                    <div class="heading">
                        <i class="icon-file-alt"></i>
                        <div class="extra-wrap">
                            <h2>@T("Account.Login.CheckoutAsGuestOrRegister")</h2>
                        </div>
                    </div>
                    <div class="content">
                        @Html.Action("TopicBlock", "Topic", new { systemName = "CheckoutAsGuestOrRegister" })
                        <a href="@Url.RouteUrl("Checkout")" class="button-cont-right">@T("Account.Login.CheckoutAsGuest")<i class="icon-circle-arrow-right"></i></a>
                        <a href="@registerUrl" class="button-cont-right">@T("Account.Register")<i class="icon-circle-arrow-right"></i></a>
                    </div>
                }
                else
                {
                    <div class="heading">
                        <i class="icon-file-alt"></i>
                        <div class="extra-wrap">
                            <h2>@T("Account.Login.NewCustomer")</h2>
                        </div>
                    </div>
                    <div class="content">
                        <p>@T("Account.Login.NewCustomerText")</p>
                        <a href="@registerUrl" class="button-cont-right">@T("Account.Register")<i class="icon-circle-arrow-right"></i></a>
                    </div>
                }
            </div>
        </div>
        <div class="span6">
            <div class="right">
                <div class="heading">
                    <i class="icon-key"></i>
                    <div class="extra-wrap">
                        <h2>@T("Account.Login.ReturningCustomer")</h2>
                    </div>
                </div>
               
                @using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "form-horizontal", id="login" }))
                {
                    var validationSummary = Html.ValidationSummary(true, T("Account.Login.Unsuccessful").Text);
                    if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                    {
                        <div class="message-error">@validationSummary</div>
                    }
                    <div class="content">
                        @if (Model.UsernamesEnabled)
                        {
                            <div class="control-group">
                                @Html.LabelFor(m => m.Username, new {@class = "padd-form control-label"}, ":")
                                <div class="controls">
                                    @Html.TextBoxFor(m => m.Username, new {@class = "q1 margen-bottom", autofocus = "autofocus"})
                                </div>
                                @Html.ValidationMessageFor(m => m.Username)
                            </div>
                        }
                        else
                        {
                            <div class="control-group">
                                @Html.LabelFor(m => m.Email, new { @class = "padd-form control-label" }, ":")
                                <div class="controls">
                                    @Html.TextBoxFor(m => m.Email, new { @class = "q1 margen-bottom", autofocus = "autofocus" })
                                </div>
                                @Html.ValidationMessageFor(m => m.Email)
                            </div>
                        }
                        <div class="control-group">
                            @Html.LabelFor(m => m.Password, new { @class = "padd-form control-label" }, ":")
                            <div class="controls">
                                @Html.PasswordFor(m => m.Password, new { @class = "q1 margen-bottom", autofocus = "autofocus" })
                            </div>
                            @Html.ValidationMessageFor(m => m.Password)
                        </div>

                         @if (Model.DisplayCaptcha)
                         {
                            <div class="captcha-box">
                                @Html.Raw(Html.GenerateCaptcha())
                            </div>
                         }
                        <div class="login-buttons">
                            <a onclick="$('#login').submit()" class="button-cont-right">@T("Account.Login.LoginButton")<i class="icon-circle-arrow-right"></i></a>
                            @Html.RouteLink(T("Account.Login.ForgotPassword").Text, "PasswordRecovery",null, new { @class = "link-login" })
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@*<div class="page login-page">
    
    <div class="page-body">
        <div class="customer-blocks">
        
            <div class="returning-wrapper fieldset">
                @using (Html.BeginForm())
                {
                    var validationSummary = Html.ValidationSummary(true, T("Account.Login.Unsuccessful").Text);
                    <div class="title">
                        <strong>@T("Account.Login.ReturningCustomer")</strong>
                    </div>
                    if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                    {
                        <div class="message-error">@validationSummary</div>
                    }
                    <div class="form-fields">
                        @if (Model.UsernamesEnabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(m => m.Username, new { }, ":")
                                @Html.TextBoxFor(m => m.Username, new { @class = "username", autofocus = "autofocus" })
                                @Html.ValidationMessageFor(m => m.Username)
                            </div>
                        }
                        else
                        {
                            <div class="inputs">
                                @Html.LabelFor(m => m.Email, new { }, ":")
                                @Html.TextBoxFor(m => m.Email, new { @class = "email", autofocus = "autofocus" })
                                @Html.ValidationMessageFor(m => m.Email)
                            </div>
                        }
                        <div class="inputs">
                            @Html.LabelFor(m => m.Password, new { }, ":")
                            @Html.PasswordFor(m => m.Password, new { @class = "password" })
                            @Html.ValidationMessageFor(m => m.Password)
                        </div>
                        <div class="inputs reversed">
                            @Html.CheckBoxFor(m => m.RememberMe)
                            @Html.LabelFor(m => m.RememberMe)
                            <span class="forgot-password">
                                @Html.RouteLink(T("Account.Login.ForgotPassword").Text, "PasswordRecovery")
                            </span>
                        </div>
                        @if (Model.DisplayCaptcha)
                        {
                            <div class="captcha-box">
                                @Html.Raw(Html.GenerateCaptcha())
                            </div>
                        }
                    </div>
                    <div class="buttons">
                        <input class="button-1 login-button" type="submit" value="@T("Account.Login.LoginButton")" />
                    </div>
                }
            </div>
        </div>
        <div class="external-authentication">
            @Html.Action("ExternalMethods", "ExternalAuthentication")
        </div>
        @Html.Action("TopicBlock", "Topic", new { systemName = "LoginRegistrationInfo" })
    </div>
</div>*@
