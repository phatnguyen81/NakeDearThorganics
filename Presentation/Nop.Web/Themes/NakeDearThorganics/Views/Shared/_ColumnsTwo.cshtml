@using Microsoft.Ajax.Utilities
@using Nop.Core
@using Nop.Core.Caching
@using Nop.Services.Localization
@using Nop.Services.Seo
@using Nop.Services.Topics
@using Nop.Web.Infrastructure.Cache
@using Nop.Web.Models.Common
@{
    Layout = "~/Views/Shared/_Root.cshtml";
}
@{
    //current category ID
    int currentCategoryId = 0;
    if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.RequestContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.RequestContext.RouteData.Values["categoryId"].ToString());
    }


    //current manufacturer ID
    int currentManufacturerId = 0;
    if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.RequestContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.RequestContext.RouteData.Values["manufacturerId"].ToString());
    }


    //current product ID
    int currentProductId = 0;
    if (Url.RequestContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        Url.RequestContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.RequestContext.RouteData.Values["productId"].ToString());
    }

    var topicService = DependencyResolver.Current.GetService<ITopicService>();
    var cacheManager = DependencyResolver.Current.GetService<ICacheManager>();
    var storeContext = DependencyResolver.Current.GetService<IStoreContext>();
    string topicCacheKey = string.Format(ModelCacheEventConsumer.TOPIC_FOOTER_MODEL_KEY,
              WorkContext.WorkingLanguage.Id, storeContext.CurrentStore.Id);
    var cachedTopicModel = cacheManager.Get(topicCacheKey, () =>
        topicService.GetAllTopics(storeContext.CurrentStore.Id)
        .Where(t => t.IncludeInFooterColumn1 || t.IncludeInFooterColumn2 || t.IncludeInFooterColumn3)
        .Select(t => new FooterModel.FooterTopicModel
        {
            Id = t.Id,
            Name = t.GetLocalized(x => x.Title),
            SeName = t.GetSeName(),
            IncludeInFooterColumn1 = t.IncludeInFooterColumn1,
            IncludeInFooterColumn2 = t.IncludeInFooterColumn2,
            IncludeInFooterColumn3 = t.IncludeInFooterColumn3
        })
        .ToList()
    );

    var commonSettings = DependencyResolver.Current.GetService<Nop.Core.Domain.Common.CommonSettings>();
    var sitemapEnable = commonSettings.SitemapEnabled;
}


<div id="container">
    <p id="back-top"> <a href="#top"><span></span></a> </p>
    <div class="container">
        <div class="row">
            <div class="span9">
                <div class="row">
                    <div class="span9" id="content">
                        @RenderSection("Breadcrumb", false)
                        @Html.Widget("main_column_before")
                        @RenderBody()
                        @Html.Widget("main_column_after")
                    </div>
                </div>
            </div>
            <aside class="span3" id="column-right">
                @if (IsSectionDefined("left"))
                {
                    @RenderSection("left")
                }
                else
                {
                    @Html.Widget("left_side_column_before")
                    <div class="box info">
                        <div class="box-heading">@T("Footer.Information")</div>
                        <div class="box-content">

                            <ul class="info-list">
                                @foreach (var topic in cachedTopicModel.Where(x => x.IncludeInFooterColumn1).ToList())
                                {
                                    <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
                                }
                            </ul>
                        </div>
                    </div>
                    @Html.Action("RecentlyViewedProductsBlock", "Product", new { productThumbPictureSize = 180 })
                    @Html.Widget("left_side_column_after")
                }
            </aside>
        </div>
    </div>
</div>

    @*<div class="side-2">
            @if (IsSectionDefined("left"))
            {
                @RenderSection("left")
            }
            else
            {
                @Html.Widget("left_side_column_before")
                @Html.Action("CategoryNavigation", "Catalog", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
                @Html.Widget("left_side_column_after_category_navigation")
                @Html.Action("ManufacturerNavigation", "Catalog", new { currentManufacturerId = currentManufacturerId })
                @Html.Action("VendorNavigation", "Catalog")
                @Html.Action("RecentlyViewedProductsBlock", "Product", new { productThumbPictureSize = 64 })
                @Html.Action("PopularProductTags", "Catalog")
                @Html.Action("PollBlock", "Poll", new { systemKeyword = "LeftColumnPoll" })
                @Html.Widget("left_side_column_after")
            }
        </div>
        <div class="center-2">
            @Html.Widget("main_column_before")
            @RenderBody()
            @Html.Widget("main_column_after")
        </div>*@
